apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  API_ENDPOINT: "http://localhost:3000"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
data: # Secrets are base64 encoded
  MONGODB_URI: bW9uZ29kYjovL2FkbWludXNlcjpwYXNzd29yZDEyM0Btb25nbzoyNzAxNw==
  JWT_SECRET: U29tZXRoaW5nVmVyeVNlY3JldFRoYXROb2JvZHlDYW5GaW5kMjEzQEJlY2F1c2VXZUxpa2VTZWN1cml0eQ==
  SESSION_SECRET: U29tZVRoaW5nVkVyeVNlQ3JldCs/MTIzMTIzQGFkYXN4YQ==
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-app
spec:
  selector:
    matchLabels:
      app: my-app
  serviceName: "my-application"
  replicas: 3
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
        - name: my-app
          image: ghcr.io/jcvikl/app:latest
#          image: ghcr.io/jcvikl/app:commit-xxxx_COMMIT_HASH_xxxx-main
          args:
            - npm
            - run
            - start
          readinessProbe:
            httpGet:
              port: 3000
              path: /
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          livenessProbe:
            httpGet:
              port: 3000
              path: /
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          envFrom:
            - configMapRef:
                name: app-config
          env:
            - name: MONGODB_URI
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MONGODB_URI
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: JWT_SECRET
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: SESSION_SECRET
---
apiVersion: v1
kind: Service
metadata:
  name: my-app
spec:
  ports:
    - name: backend
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: my-app
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  annotations:
    acme.cert-manager.io/http01-edit-in-place: "true"
#    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - my-app.77777771.xyz
      secretName: app-tls
  rules:
    - host: my-app.77777771.xyz
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: my-app
                port:
                  number: 3000
---
